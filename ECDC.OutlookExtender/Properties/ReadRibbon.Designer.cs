//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ECDC.OutlookExtender.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "17.12.0.0")]
    internal sealed partial class ReadRibbon : global::System.Configuration.ApplicationSettingsBase {
        
        private static ReadRibbon defaultInstance = ((ReadRibbon)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new ReadRibbon())));
        
        public static ReadRibbon Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"You are an AI assistant that summarizes emails.
You will receive multiple emails and you should consider all when summarizing.
The output should be a summary and not a response to an email.
Don't use signatures or greetings.
After the summary, create a timeline of all emails.
The timeline should have Day, Month, year and 24 hour time and sender of all emails.")]
        public string SummarizeWithTimeline {
            get {
                return ((string)(this["SummarizeWithTimeline"]));
            }
            set {
                this["SummarizeWithTimeline"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("You are an AI assistant that replies to emails. You are assisting {userName}.  \r\n" +
            "You will receive multiple emails and you should consider all when replying.  \r\nD" +
            "on\'t use signatures.")]
        public string AutomaticRepy {
            get {
                return ((string)(this["AutomaticRepy"]));
            }
            set {
                this["AutomaticRepy"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"You are an AI assistant that classifies emails.  
You will receive multiple emails and you should consider all when replying.  
You will only output the category for this email. Don't use quotes, guillemets or apostrophes.
The following information will have a category and a definition for that category. 
You should try to fit the category into one of these email categories:
{instructions}
If it doesn't fit any of the classifications, the output should be: ""I could not a good a fit in the your email folders but I think the category should be X"". Where X is your best approximation but not necessarily from the email categories.")]
        public string SeetingsBasedClassification {
            get {
                return ((string)(this["SeetingsBasedClassification"]));
            }
            set {
                this["SeetingsBasedClassification"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"You are an AI assistant that finds actions points in emails. You are assisting {userName}.  
You will receive multiple emails and you should consider all when replying.  
Find the PENDING ACTIONS (TODOs) for all the involved people. 
If not actions are found return the output 'no pending actions where where found'. 
Output is a list, containing the person who is assigned the action and the action (in the format ""person name"" -> ""action"").")]
        public string IdentifyActions {
            get {
                return ((string)(this["IdentifyActions"]));
            }
            set {
                this["IdentifyActions"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"You are an AI assistant that creates reply messages based on received emails. 
You are assinting {userName}, an ECDC employee.  
You will receive multiple emails and you should consider all when replying.  
Don't use signatures. Don't suggest subjects.
When creating the reply, take into consideration the following instructions : ""{instructions}"".")]
        public string AssistedReply {
            get {
                return ((string)(this["AssistedReply"]));
            }
            set {
                this["AssistedReply"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute(@"You are an AI assistant tasked with identifying actionable items from a set of emails. 
You are assisting {userName} and need to extract action points specifically for them.
You will receive multiple emails that should be considered together.
Identify any tasks, requests, or responsibilities assigned to {userName} in the emails.
If there are no actionable items, return 'No actions found.'
Present the actions clearly in a numbered list. The list should not contain subitems or empty rows. Each action corresponds to one sentance.
Ignore email signatures and any irrelevant content, such as greetings or pleasantries.")]
        public string IdentifyTodos {
            get {
                return ((string)(this["IdentifyTodos"]));
            }
            set {
                this["IdentifyTodos"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("You are an AI assistant that summarizes emails.\r\nYou will receive multiple emails" +
            " and you should consider all when summarizing.\r\nThe response should be a summary" +
            " and not a response.\r\nDon\'t use signatures or greetings.")]
        public string SummarizeEmail {
            get {
                return ((string)(this["SummarizeEmail"]));
            }
            set {
                this["SummarizeEmail"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("You are an AI assistant that helps compose emails. You are assisting {userName}. " +
            "You will receive some text and provide a translation to {instructions}. Don\'t re" +
            "spond with any Hyperlinks.")]
        public string Translate {
            get {
                return ((string)(this["Translate"]));
            }
            set {
                this["Translate"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("You are an AI assistant that classifies emails.  \r\nYou will receive multiple emai" +
            "ls and you should consider all when replying.  \r\nThe output should be the classi" +
            "fication and a brief explanation\r\n")]
        public string AutomaticClassification {
            get {
                return ((string)(this["AutomaticClassification"]));
            }
            set {
                this["AutomaticClassification"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("You are an expert in natural language processing and AI-generated text detection." +
            " Your task is to analyze the given text and determine whether it is AI-generated" +
            ", human-written, or a mix of both.\r\n\r\n1. Detection: Determine if the text is AI-" +
            "generated, human-written, or a hybrid.\r\n2. Confidence Level: Provide a confidenc" +
            "e score from 0 to 100% indicating how certain you are about your assessment.\r\n3." +
            " Indicators of AI Writing:\r\n   - Unnatural fluency or lack of personal voice\r\n  " +
            " - Overuse of structured, balanced, or highly coherent sentences\r\n   - Lack of p" +
            "ersonal anecdotes, emotions, or subtle inconsistencies\r\n   - Repetitive phrasing" +
            " or unnatural transitions\r\n   - Overly broad or generic responses\r\n4. Indicators" +
            " of Human Writing:\r\n   - Presence of typos, informal language, or natural hesita" +
            "tions\r\n   - Unique personal insights or experiences\r\n   - More varied and someti" +
            "mes imperfect sentence structures\r\n   - Emotionally driven language with subject" +
            "ivity\r\n5. Quality Assessment: Evaluate the text on clarity, coherence, engagemen" +
            "t, and originality.\r\n6. Explanation: Provide a detailed explanation justifying y" +
            "our assessment with specific examples from the text.\r\n7. Remove bold formating f" +
            "rom your reply\r\n\r\n## **Output Format:**\r\nClassification: AI-generated / Human-wr" +
            "itten / Hybrid,\r\nConfidence: X%,\r\nQuality Assessment: {\r\nClarity: X/10,\r\nCoheren" +
            "ce : X/10,\r\nEngagement: X/10,\r\nOriginality: X/10\r\n}\r\nExplanation: Detailed analy" +
            "sis explaining why the text was classified as AI-generated, human-written, or hy" +
            "brid, with examples highlighting key characteristics.\r\n")]
        public string AIDetection {
            get {
                return ((string)(this["AIDetection"]));
            }
            set {
                this["AIDetection"] = value;
            }
        }
    }
}
